#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy, roslaunch, tf
import os, math, time
from enum import Enum
from std_msgs.msg import UInt8, Float64
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry

class ConeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_detect/nodes', '')
        # subscribes state 
        self.sub_mode_control = rospy.Subscriber('/control/mode', UInt8, self.cbReceiveMode, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)
        self.sub_odom = rospy.Subscriber('/odom', Odometry, self.cbOdom, queue_size=1)

        # launch file variables
        self.launch_driving_lane_launched = False
        self.launch_detect_lane_launched = False
        
        # mode variables, 0: cone detected ( Stop change lane and run the robot ), 1: no cone detected
        self.current_mode = 1 

        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        self.is_triggered = False

        # Store the current position of the robot
        self.current_pos_x = 0.0
        self.current_pos_y = 0.0

        # Moving flags
        self.is_step_start = False
        self.is_step_left = False
        self.is_step_right = False
        self.is_step_forward = False
        self.is_step_backward = False
        
        # Moving internal valiables
        self.theta = 0.0
        self.current_theta = 0.0
        self.last_current_theta = 0.0
        self.lastError = 0.0

        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            self.fnControlNode()
            loop_rate.sleep()

    # Receiving the current mode message from the detect cone node
    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("ReceiveMode %d", mode_msg.data)
        self.current_mode = mode_msg.data

    # Control which file to launch based on the cone node's current mode
    def fnControlNode(self):
        if self.current_mode == 1:
            self.fnLaunch(True)
        elif self.current_mode == 0:
            self.fnLaunch(False)

    # Launch the lane detection and lane following nodes
    def fnLaunch(self,is_start):          
        if is_start == True:
            if self.launch_driving_lane_launched == False:
                self.launch_driving_lane = roslaunch.scriptapi.ROSLaunch()
                self.launch_driving_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_lane.launch"])
                self.launch_driving_lane_launched = True
                self.launch_driving_lane.start()
            else:
                pass

            if self.launch_detect_lane_launched == False:
                self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()    
                self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_lane.launch"])
                self.launch_detect_lane_launched = True
                self.launch_detect_lane.start()
            else:
                pass
        else:
            if self.launch_detect_lane_launched == True:
                self.launch_detect_lane_launched = False
                self.launch_detect_lane.shutdown()

            if self.launch_driving_lane_launched == True:
                self.launch_driving_lane_launched = False
                self.launch_driving_lane.shutdown()
                
                # Perform the sequence here to change the lanes, all these use a pid to turn and move forward
                # Turn left 90 degrees
                # move forward 0.35 meters
                # Turn right 90 degrees
                self.turn_left(90)
                self.go_forward(0.35)
                self.turn_right(90)

                # Here run the lane following but this time run the detect_lane_left node, on the launch file detect_lane_left.launch.
                # A while loop for 27 seconds ( Try tweaking this time ), this includes the time to start the node
                start_time = time.time()
                current_time = time.time()
                while current_time - start_time < 27:
                    if self.launch_driving_lane_launched == False:
                        self.launch_driving_lane = roslaunch.scriptapi.ROSLaunch()
                        self.launch_driving_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_lane.launch"])
                        self.launch_driving_lane_launched = True
                        self.launch_driving_lane.start()
                    else:
                        pass

                    if self.launch_detect_lane_launched == False:
                        self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()    
                        self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_lane_left.launch"])
                        self.launch_detect_lane_launched = True
                        self.launch_detect_lane.start()
                    else:
                        pass

                    current_time = time.time()

                # Stop the lane following
                self.launch_detect_lane_launched = False
                self.launch_detect_lane.shutdown()
                self.launch_driving_lane_launched = False
                self.launch_driving_lane.shutdown()

                # Change back to the original lane at this point, and continue doing what we were doing before
                self.turn_right(90)
                self.go_forward(0.35)
                self.turn_left(90)

    def step_completed(self):
        self.is_step_start = False
        self.is_step_left = False
        self.is_step_right = False
        self.is_step_forward = False
        self.is_step_backward = False
        self.theta = 0.0
        self.last_current_theta = 0.0
        self.lastError = 0.0
        self.fnStop()

    def turn_left(self, msg):
        rospy.loginfo("turn_left function is called")
        self.lastError = 0.0
        self.desired_theta = self.current_theta + math.radians(msg)
        self.is_step_start = True
        
        while True:
            error = self.fnTurn()

            if math.fabs(error) < 0.05:
                rospy.loginfo("turn_left function is finished")
                self.step_completed()
                break

    def turn_right(self, msg):
        rospy.loginfo("turn_right function is called")
        self.lastError = 0.0
        self.desired_theta = self.current_theta - math.radians(msg)

        while True:
            error = self.fnTurn()
            if math.fabs(error) < 0.05:
                rospy.loginfo("turn_right function is finished")
                self.step_completed()
                break

    def go_forward(self, msg):
        rospy.loginfo("go_forawrd function is called")
        self.lastErorr = 0.0
        self.start_pos_x = self.current_pos_x
        self.start_pos_y = self.current_pos_y

        while True:
            error = self.fnStraight(msg)
            if math.fabs(error) < 0.005:
                rospy.loginfo("go_forward function is finished")
                self.step_completed()
                break
            
            time.sleep(0.4)

    def go_backward(self, msg):
        rospy.loginfo("go_backward function is called")
        self.lastError = 0.0
        self.start_pos_x = self.current_pos_x
        self.start_pos_y = self.current_pos_y
        
        while True:
            error = self.fnBackStraight(msg)
            if math.fabs(error) < 0.005:
                rospy.loginfo("go_backward function is finished")
                self.step_completed()
                break

    def fnTurn(self):
        err_theta = self.current_theta - self.desired_theta
        
        # rospy.loginfo("err_theta  desired_theta  current_theta : %f  %f  %f", err_theta, self.desired_theta, self.current_theta)
        Kp = 0.45
        Kd = 0.03

        angular_z = Kp * err_theta + Kd * (err_theta - self.lastError)
        self.lastError = err_theta

        twist = Twist()
        twist.linear.x = 0 #0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -(angular_z * 2)
        self.pub_cmd_vel.publish(twist)

        # rospy.loginfo("angular_z : %f", angular_z)

        return err_theta

    def fnStraight(self, desired_dist):   
        err_pos = math.sqrt((self.current_pos_x - self.start_pos_x) ** 2 + (self.current_pos_y - self.start_pos_y) ** 2) - desired_dist
        rospy.loginfo("err_pos :" + str(err_pos) + " desired_dist :" + str(desired_dist) + " current_pos_x :" + str(self.current_pos_x) + " current_pos_y :" + str(self.current_pos_y) + " start_pos_x :" + str(self.start_pos_x) + " start_pos_y :" + str(self.start_pos_y))

        # rospy.loginfo("error_pos2 = %f", err_pos)
        Kp = 0.04
        Kd = 0.05

        angular_z = Kp * err_pos + Kd * (err_pos - self.lastError)
        self.lastError = err_pos

        twist = Twist()

        if err_pos < 0:
            twist.linear.x = 0.07 #0.07
        else:
            twist.linear.x = -0.07

        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

        return err_pos


    def fnBackStraight(self, desired_dist):   
        err_pos = math.sqrt((self.current_pos_x - self.start_pos_x) ** 2 + (self.current_pos_y - self.start_pos_y) ** 2) - desired_dist
    
        # rospy.loginfo("error_pos = %f", err_pos)
        Kp = 0.04
        Kd = 0.05

        angular_z = Kp * err_pos + Kd * (err_pos - self.lastError)
        self.lastError = err_pos

        twist = Twist()
      
        if err_pos < 0:
            twist.linear.x = -0.1 #0.07
        else:
            twist.linear.x = 0.1

        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

        return err_pos

    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    # Callback for getting the current position of the robot
    def cbOdom(self, odom_msg):
        quaternion = (odom_msg.pose.pose.orientation.x, odom_msg.pose.pose.orientation.y, odom_msg.pose.pose.orientation.z, odom_msg.pose.pose.orientation.w)
        self.current_theta = self.euler_from_quaternion(quaternion)

        if (self.current_theta - self.last_current_theta) < -math.pi:
            self.current_theta = 2. * math.pi + self.current_theta
            self.last_current_theta = math.pi
        elif (self.current_theta - self.last_current_theta) > math.pi:
            self.current_theta = -2. * math.pi + self.current_theta
            self.last_current_theta = -math.pi
        else:
            self.last_current_theta = self.current_theta

        self.current_pos_x = odom_msg.pose.pose.position.x
        self.current_pos_y = odom_msg.pose.pose.position.y

    def euler_from_quaternion(self, quaternion):
        theta = tf.transformations.euler_from_quaternion(quaternion)[2]
        return theta

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('cone_controller')
    node = ConeController()
    node.main()